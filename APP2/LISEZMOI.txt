Recommandations sur l'utilisation des fichiers pour l'APP2.
A lire absolument !


****************************************************************
**  Pour tout le monde                                        **
****************************************************************

Renseignez ici les noms des membres de votre trinome :

SIMON - Noan : ....
SKARLEAS - Vasileios : ....
TREHIN - Gwendal : ....

Si vous avez des commentaires, remarques etc. pour le rendu, vous pouvez les 
mettre ici:

********************************
** Complexité                 **
********************************

conversion(texte, routine)
   compter_accolade = 0
   pour chaque c dans texte à l'inverse                              x n
      si compter_accolade = 0                                       o(1)
         si c est caractere et c different que '}'
            ajouter_debut_letre(c, routine)                       o(1)
         si c est chifre et c different que '}'
            ajouter_debut_chifre(c, routine)                      o(1)
      si c est '}'                                                  o(1)
         compter_accolade++                                       o(1)
      sinon 
         si c = '{'                                                  o(1)
            compter_accolade--                                       ο(n) 
            si compter_accolade = 0                               ο(n)
               ajout_debut(conversion(contenu_accolade, routine))
            sinon                                                    o(1)
               contenu_accolade += c                              0(1)

n x (o(1)+o(1)+o(n)+o(1)) = o(n^2)

/*----------------------------------------------------------------*/

afficher(routine)
   init cel = routine->tete                      o(1)
   afficher '['                                  o(1)
   tant que cel different que NULL               x n
      si cel->type_valeur est chifre           o(1)
         afficher_chifre(cel)                o(1)
      si cel->type_valeur est caractere        o(1)
         afficher_caracter(cel)              o(1)
      si cel->type_valeur est sequence         o(1)
         afficher_sequence(cel)              o(1)
      cel = cel->suivant                       o(1)
   fin tant que
   afficher ']'                                  o(1)

   o(1) + o(1) + n x (o(1)+o(1)+o(1)) + o(1) = o(n)
      
/*----------------------------------------------------------------*/

ajout_debut(sequence, cel) //Il s'agit de la fonction d'empilage pour un pile
   cel->suivant = sequence->tete           o(1)
   sequence->tete = cel                    o(1)

o(1) + o(1) = 2o(1) ~ o(1)

/*----------------------------------------------------------------*/

retirer_tete(sequence)
   init cel                               o(1)
   cel = sequence->tete->suivant          o(1)
   sequence->tete = cel                   o(1)


o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

depiler(sequence)
   init cel                            o(1)
   cel = sequence->tete                o(1)
   retirer_tete(sequence)              o(1)

o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

vider(sequence)
   sequence->tete = NULL               o(1)

/*----------------------------------------------------------------*/

queue(sequence)
   init cel                                       o(1)
   cel = sequence->tete                           o(1)
   si cel est NULL                                o(1)
      retourner NULL                            o(1)
   sinon                                          O(n)
      tant que cel est different que NULL        x n
         cel = cel->suivant                   o(1)
      retourner cel                             O(1)

o(1) + o(1) + o(1) + (n(o(1)) + o(1)) = 3o(1) + o(n) ~ o(n)

/*----------------------------------------------------------------*/

inserer_liste_debut(sequence, sequence_2)
   cel = queue(sequence_2)                     o(n)     
   si cel est different que NULL               o(1)
      cel->suivant = sequence->tete         o(1)
      sequence->tete = sequence_2->tete     o(1)

o(n) + (o(1) + o(1)) = o(n) + 2o(1) ~ o(n)

/*----------------------------------------------------------------*/

copie_sequence(sequence)
   int cel = sequence->tete                                 o(1)                      
   si sequence->tete est NULL                               o(1)
      retourner nouvelle_sequence = NULL              o(1)
   sinon                                                    o(n)
      nouvelle_sequence<-tete = cel                   o(1)
      tant que cel est different que NULL             x n
         init nouvelle_cel                        o(1)
         nouvelle_cel->suivant = cel->suivant     o(1)
         cel = cel->suivant                       o(1)
      retourner nouvelle_sequence                     o(1)
      
o(1) + o(1) + ((n x (o(1) + o(1) + o(1))) + o(1)) = 2o(1) + o(n) ~ o(n)

/*----------------------------------------------------------------*/

addition(sequence)
   x <- depiler_nombre(sequence)     o(1)
   y <- depiler_nombre(sequence)     o(1)
   empiler_nombre(sequence, x+y)     o(1)

   o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

soustraction(sequence)
   x <- depiler_nombre(sequence) o(1)
   y <- depiler_nombre(sequence) o(1)
   empiler_nombre(sequence, y-x) o(1)

   o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

multiplication(sequence)
   x <- depiler_nombre(sequence)   o(1)
   y <- depiler_nombre(sequence)   o(1)
   empiler_nombre(sequence, x * y) o(1)

   o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

execution_coditionnelle(routine, sequence)
{
   commande_1 = depiler_seq(sequence)                      o(1)
   commande_2 = depiler_seq(sequence)                      o(1)
   x <- depiler_int(sequence)                              o(1)
   si x = 0 alors                                         o(1)
      commande_a_ajouter <- copie_sequence(commande_1) o(1)
   sinon                                                  o(1)
      commande_a_ajouter <- copie_sequence(commande_2) o(1)
   inserer_liste_debut(routine, commande_a_ajouter)        o(1)

o(1) + o(1) + o(1) + o(1) + o(1) = 5o(1) ~ o(1)

/*----------------------------------------------------------------*/

echange(sequence)

   cell1 <- depiler(sequence)    o(1)
   cell2 <- depiler(sequence)    o(1)
   ajout_debut(sequence, cell1)  o(1)
   ajout_debut(sequence, cell2)  o(1)

o(1) + o(1) + o(1) + o(1) = 4o(1) ~ o(1)

/*----------------------------------------------------------------*/

exec(routine, sequence)
   seq <- depiler_sequence(sequence) o(1)
   inserer_liste_debut(routine, seq) o(1)

o(1) + o(1) = 2o(1) ~ o(1)

/*----------------------------------------------------------------*/

clone(sequence)
   cell <- tete(sequence)                      o(1)
   si type_valeur(cell) est liste chainee      o(1)
        cell2 <- copie_sequence(cell)         o(1)
   sinon                                       o(1)
        cell2 <- cell                         o(1)
   type_valeur(cell2) <- type_valeur(cell)     o(1)
   cell2->suivant = NULL                       o(1)
   empiler(seuence, cell2)                     o(1)

o(1) + o(1) + o(1) + o(1) + o(1) + o(1) = 6o(1) ~ o(1)

/*----------------------------------------------------------------*/

ignore(sequence)
    retirer_tete(sequence) o(1)

o(1)

/*----------------------------------------------------------------*/

boucle(routine, sequence)
   cell_n <- depiler(sequence)                               o(1)
   cmd <- depiler_seq(sequence)                              o(1)
   si type_valeur(cell_n) est nombre & cell_n > 0 alors      11o(1) ~ o(1)
      cell_n <- cell_n -1                                  o(1)
      cell_cmd <- cmd                                      o(1)
      type_valeur(cell_cmd) <- liste chainee               o(1)
      cell_cmd->suivant = NULL                             o(1)

      empiler(sequence, cell_cmd)                          o(1)
      empiler(sequence, cell_n)                            o(1)
      cell_B <- 'B'                                        o(1)
      type_valeur(cell_B) <- charactere                    o(1)
      cell_B->suivant = NULL                               o(1)
      empiler(routine, cell_B)                             o(1)
      inserer_liste_debut(routine, copie_sequence(cmd))    o(1)

o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

rotation(sequence)
   x = depiler_int(sequence)                                  o(1)
   n = depiler_int(sequence)                                  o(1)
   si n = 1 alors                                             o(1)
        arreter(rotation)                                 o(1)
   seq <- nouvelle_seq()                                      o(1)
   pour i de 0 à n faire                                      n x 2o(1) ~ o(n)
      cell = depiler(sequence)                            o(1)
      ajout_debut(seq, cell)                              o(1)
   cell <- tete(seq)                                          o(1)
   pour i de 0 à n faire                                      n x 5o(1) ~ o(n)
      si i >= x                                           4o(1)
         cell2 = nouvelleCellule()                    o(1)
         cell2 <- cell                                o(1)
         type_valeur(cell2) <- type_valeur(cell)      o(1)
         empiler(sequence, cell2)                     o(1)
      cell <- cell->suivant                                o(1)

   cell <- tete(seq)                                          o(1)
   pour i de 0 à x faire                                      X x 5o(1) ~ o(x)
      cell2 = nouvelleCellule();                           o(1)
      cell2 <- cell                                        o(1)
      type_valeur(cell2) <- type_valeur(cell)              o(1)
      empiler(sequence, cell2)                             o(1)
      cell <- cell->suivant                                o(1)

o(1) + o(1) + o(1) + o(1) + o(n) + o(1) + o(n) + o(1) + o(x) = 6o(1) + 2o(n) + o(x) ~ o(1) + o(n) + o(x) ~ o(n) comme n > x

/*----------------------------------------------------------------*/

operation_Z(sequence)
   retourner_sequence(sequence)       o(1)

o(1)
   

********************************
** Conclusion                 **
********************************
On arrive aux graphes base, memfree et piiile d'avoir une representation lineaire. Ça s'explique par le fait que 
les fonctionnes sont lineaires. Aussi le mode de stockage des donness est les listes chaines. À chaque operation on effectue
une addition et une sustraction des donness par les listes chaines. La consomation des ressources est dynamique par rapport
le nombre des donnees et comme la complexité generale de la majorite des fonctionnes est o(n). Si on utilisait des tables pour
stocker les donnees, la representation serait des droits stables (pas lineaire). Même si la fonction de conversion a une 
complexité de o(n^2), les graphes restent lineaires, qui s'explique par le fait que  c'est une application recursif.

Les tests long et nested provoquent une seg fault tous deux pour une taille de deux mille. C'est erreur n'arrive qu'a cet endroit,
et on ne comprends donc pas trop ce qu'il s'y passe. Une des adresse de la cellul suivante est invalide a un certain moment, peut
etre une adresse qui n'est pas mise a NULL la ou elle devrait. 





****************************************************************
**  Langage Python                                            **
****************************************************************

Utilisez (et modifiez) le script "run.py" fourni.
(Lire le debut de ce fichier pour une explication de comment lancer les 
tests.)




****************************************************************
**  Langage C                                                 **
****************************************************************

Compilation
-----------
Pour compiler :
> make

ou

> clang -Wall -Wextra main.c -o main curiosity.c interprete.c listes.c
(Nous vous conseillons d'utiliser le compilateur clang plutôt que gcc.)


Lancer un test
--------------

Test complet
> ./main tests/<nom de test>.test

Test en mode "pas à pas" :
> ./main -d tests/<nom de test>.test

Test de performance :
  => mettre tous les affichages dans des blocs conditionnels
     avec 'if (! silent_mode)'
  => recompiler avec les options de performance
     (modifiez les CFLAGS comme indiqué dans le Makefile
      puis lancez 'make -B')

> ./main -silent tests/perfs/<nom de test de performance>.test


Lancer une suite de tests
-------------------------

Tests fonctionnels :
> ./tests/check.py c

Batterie de tests de performance (avec generation de courbes):
> ./tests/performance/perf.py c



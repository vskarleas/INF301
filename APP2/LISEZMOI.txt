Recommandations sur l'utilisation des fichiers pour l'APP2.
A lire absolument !


****************************************************************
**  Pour tout le monde                                        **
****************************************************************

Renseignez ici les noms des membres de votre trinome :

SIMON - Noan : ....
SKARLEAS - Vasileios : ....
TREHIN - Gwendal : ....

Si vous avez des commentaires, remarques etc. pour le rendu, vous pouvez les 
mettre ici:

********************************
** Complexité                 **
********************************

conversion(texte, routine)
   compter_accolade = 0
   pour chaque c dans texte à l'inverse                              x n
      si compter_accolade = 0                                       o(1)
         si c est caractere et c different que '}'
            ajouter_debut_letre(c, routine)                       o(1)
         si c est chifre et c different que '}'
            ajouter_debut_chifre(c, routine)                      o(1)
      si c est '}'                                                  o(1)
         compter_accolade++                                       o(1)
      sinon 
         si c = '{'                                                  o(1)
            compter_accolade--                                       ο(n) 
            si compter_accolade = 0                               ο(n)
               ajout_debut(conversion(contenu_accolade, routine))
            sinon                                                    o(1)
               contenu_accolade += c                              0(1)

n x (o(1)+o(1)+o(n)+o(1)) = o(n^2)


afficher(routine)

      






****************************************************************
**  Langage Python                                            **
****************************************************************

Utilisez (et modifiez) le script "run.py" fourni.
(Lire le debut de ce fichier pour une explication de comment lancer les 
tests.)




****************************************************************
**  Langage C                                                 **
****************************************************************

Compilation
-----------
Pour compiler :
> make

ou

> clang -Wall -Wextra main.c -o main curiosity.c interprete.c listes.c
(Nous vous conseillons d'utiliser le compilateur clang plutôt que gcc.)


Lancer un test
--------------

Test complet
> ./main tests/<nom de test>.test

Test en mode "pas à pas" :
> ./main -d tests/<nom de test>.test

Test de performance :
  => mettre tous les affichages dans des blocs conditionnels
     avec 'if (! silent_mode)'
  => recompiler avec les options de performance
     (modifiez les CFLAGS comme indiqué dans le Makefile
      puis lancez 'make -B')

> ./main -silent tests/perfs/<nom de test de performance>.test


Lancer une suite de tests
-------------------------

Tests fonctionnels :
> ./tests/check.py c

Batterie de tests de performance (avec generation de courbes):
> ./tests/performance/perf.py c




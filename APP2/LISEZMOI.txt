Recommandations sur l'utilisation des fichiers pour l'APP2.
A lire absolument !


****************************************************************
**  Pour tout le monde                                        **
****************************************************************

Renseignez ici les noms des membres de votre trinome :

SIMON - Noan : ....
SKARLEAS - Vasileios : ....
TREHIN - Gwendal : ....

Si vous avez des commentaires, remarques etc. pour le rendu, vous pouvez les 
mettre ici:

********************************
** Complexité                 **
********************************

conversion(texte, routine)
   compter_accolade = 0
   pour chaque c dans texte à l'inverse                              x n
      si compter_accolade = 0                                       o(1)
         si c est caractere et c different que '}'
            ajouter_debut_letre(c, routine)                       o(1)
         si c est chifre et c different que '}'
            ajouter_debut_chifre(c, routine)                      o(1)
      si c est '}'                                                  o(1)
         compter_accolade++                                       o(1)
      sinon 
         si c = '{'                                                  o(1)
            compter_accolade--                                       ο(n) 
            si compter_accolade = 0                               ο(n)
               ajout_debut(conversion(contenu_accolade, routine))
            sinon                                                    o(1)
               contenu_accolade += c                              0(1)

n x (o(1)+o(1)+o(n)+o(1)) = o(n^2)

/*----------------------------------------------------------------*/

afficher(routine)
   init cel = routine->tete                      o(1)
   afficher '['                                  o(1)
   tant que cel different que NULL               x n
      si cel->type_valeur est chifre           o(1)
         afficher_chifre(cel)                o(1)
      si cel->type_valeur est caractere        o(1)
         afficher_caracter(cel)              o(1)
      si cel->type_valeur est sequence         o(1)
         afficher_sequence(cel)              o(1)
      cel = cel->suivant                       o(1)
   fin tant que
   afficher ']'                                  o(1)

   o(1) + o(1) + n x (o(1)+o(1)+o(1)) + o(1) = o(n)
      
/*----------------------------------------------------------------*/

ajout_debut(sequence, cel) //Il s'agit de la fonction d'empilage pour un pile
   cel->suivant = sequence->tete           o(1)
   sequence->tete = cel                    o(1)

o(1) + o(1) = 2o(1) ~ o(1)

/*----------------------------------------------------------------*/

retirer_tete(sequence)
   init cel                               o(1)
   cel = sequence->tete->suivant          o(1)
   sequence->tete = cel                   o(1)


o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

depiler(sequence)
   init cel                            o(1)
   cel = sequence->tete                o(1)
   retirer_tete(sequence)              o(1)

o(1) + o(1) + o(1) = 3o(1) ~ o(1)

/*----------------------------------------------------------------*/

vider(sequence)
   sequence->tete = NULL               o(1)

/*----------------------------------------------------------------*/

queue(sequence)
   init cel                                       o(1)
   cel = sequence->tete                           o(1)
   si cel est NULL                                o(1)
      retourner NULL                            o(1)
   sinon                                          O(n)
      tant que cel est different que NULL        x n
         cel = cel->suivant                   o(1)
      retourner cel                             O(1)

o(1) + o(1) + o(1) + (n(o(1)) + o(1)) = 3o(1) + o(n) ~ o(n)

/*----------------------------------------------------------------*/

inserer_liste_debut(sequence, sequence_2)
   cel = queue(sequence_2)                     o(n)     
   si cel est different que NULL               o(1)
      cel->suivant = sequence->tete         o(1)
      sequence->tete = sequence_2->tete     o(1)

o(n) + (o(1) + o(1)) = o(n) + 2o(1) ~ o(n)

/*----------------------------------------------------------------*/

copie_sequence(sequence)
   int cel = sequence->tete                                 o(1)                      
   si sequence->tete est NULL                               o(1)
      retourner nouvelle_sequence = NULL              o(1)
   sinon                                                    o(n)
      nouvelle_sequence<-tete = cel                   o(1)
      tant que cel est different que NULL             x n
         init nouvelle_cel                        o(1)
         nouvelle_cel->suivant = cel->suivant     o(1)
         cel = cel->suivant                       o(1)
      retourner nouvelle_sequence                     o(1)
      
o(1) + o(1) + ((n x (o(1) + o(1) + o(1))) + o(1)) = 2o(1) + o(n) ~ o(n)


********************************
** Conclusion                 **
********************************
/*Par rapport les graphes*/





****************************************************************
**  Langage Python                                            **
****************************************************************

Utilisez (et modifiez) le script "run.py" fourni.
(Lire le debut de ce fichier pour une explication de comment lancer les 
tests.)




****************************************************************
**  Langage C                                                 **
****************************************************************

Compilation
-----------
Pour compiler :
> make

ou

> clang -Wall -Wextra main.c -o main curiosity.c interprete.c listes.c
(Nous vous conseillons d'utiliser le compilateur clang plutôt que gcc.)


Lancer un test
--------------

Test complet
> ./main tests/<nom de test>.test

Test en mode "pas à pas" :
> ./main -d tests/<nom de test>.test

Test de performance :
  => mettre tous les affichages dans des blocs conditionnels
     avec 'if (! silent_mode)'
  => recompiler avec les options de performance
     (modifiez les CFLAGS comme indiqué dans le Makefile
      puis lancez 'make -B')

> ./main -silent tests/perfs/<nom de test de performance>.test


Lancer une suite de tests
-------------------------

Tests fonctionnels :
> ./tests/check.py c

Batterie de tests de performance (avec generation de courbes):
> ./tests/performance/perf.py c



